@using TVS_App.Application.Commands.ServiceOrderCommands
@using TVS_App.Domain.Entities
@using TVS_App.Domain.Enums
@using TVS_App.Web.Extensions
@using TVS_App.Web.Handlers

<MudDialog Class="rounded-lg">
    <TitleContent>
        <MudText Typo="Typo.h5" Align="Align.Center" Color="Color.Primary" Class="font-extrabold text-[#750303]]">
            ADICIONAR ORÇAMENTO - OS @ServiceOrder.Id
        </MudText>
    </TitleContent>

    <DialogContent>
        <!-- EMPRESA -->
        <MudPaper Class="py-4 px-2" Elevation="0">
            <MudText Typo="Typo.h6" Color="Color.Primary" Class="uppercase font-bold mb-2">Empresa</MudText>
            <MudText Typo="Typo.subtitle1" Class="font-semibold">@ServiceOrder.Enterprise.GetDisplayName()</MudText>
        </MudPaper>

        <!-- DADOS DO CLIENTE -->
        <MudPaper Class="py-4 px-2" Elevation="0">
            <MudText Typo="Typo.h6" Color="Color.Primary" Class="uppercase font-bold mb-4">Dados do Cliente</MudText>
            <MudGrid Class="mb-4"> 
                <MudItem xs="12" md="6">
                    <MudTextField Variant="Variant.Outlined" Label="Nome" Value="@ServiceOrder.Customer.Name.CustomerName" ReadOnly="true" />
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudTextField Variant="Variant.Outlined" Label="Telefone 1" Value="@ServiceOrder.Customer.Phone.CustomerPhone" ReadOnly="true" />
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudTextField Variant="Variant.Outlined" Label="Endereço" Value="@ServiceOrder.Customer.Address.ToString().ToUpper()" ReadOnly="true" />
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudTextField Variant="Variant.Outlined" Label="Telefone 2" Value="@ServiceOrder.Customer.Phone2.CustomerPhone" ReadOnly="true" />
                </MudItem>
            </MudGrid>
        </MudPaper>

        <!-- DADOS DO PRODUTO -->
        <MudPaper Class="py-4 px-2" Elevation="0">
            <MudText Typo="Typo.h6" Color="Color.Primary" Class="uppercase font-bold mb-4">Dados do Produto</MudText>
            <MudGrid>
                <MudItem xs="12" md="6">
                    <MudTextField Variant="Variant.Outlined" Label="Tipo" Value="@ServiceOrder.Product.Type.GetDisplayName()" ReadOnly="true" />
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudTextField Variant="Variant.Outlined" Label="Marca" Value="@ServiceOrder.Product.Brand" ReadOnly="true" />
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudTextField Variant="Variant.Outlined" Label="Modelo" Value="@ServiceOrder.Product.Model" ReadOnly="true" />
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudTextField Variant="Variant.Outlined" Label="Série" Value="@ServiceOrder.Product.SerialNumber" ReadOnly="true" />
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudTextField Variant="Variant.Outlined" Label="Defeito" Value="@ServiceOrder.Product.Defect" ReadOnly="true" />
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudTextField  Variant="Variant.Outlined"Label="Data de Entrada" Value="@ServiceOrder.EntryDate.ToString("dd/MM/yyyy")" ReadOnly="true" />
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudTextField Variant="Variant.Outlined" Label="Situação" Value="@Situacao" ReadOnly="true" />
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudTextField Variant="Variant.Outlined" Label="Prateleira" Value="@ServiceOrder.Product.Location" ReadOnly="true" />
                </MudItem>
            </MudGrid>
            <div class="mt-3">
                <LocationButton ServiceOrder="ServiceOrder" OnLocationChanged="UpdateLocation" />
            </div>
        </MudPaper>

        <!-- FORMULÁRIO DE ORÇAMENTO -->
        <MudPaper Class="py-4 px-2" Elevation="0">
            <MudText Typo="Typo.h6" Color="Color.Primary" Class="uppercase font-bold mb-4">Adicionar Orçamento</MudText>
            <MudForm @ref="_form">
                <MudGrid>
                    <MudItem xs="12" md="6">
                        <MudTextField Label="Solução" Lines="2" @bind-Value="Request.Solution" For="@(() => Request.Solution)" Variant="Variant.Outlined" />
                    </MudItem>
                    <MudItem xs="12" md="6">
                        <MudTextField Label="Mensagem de orçamento" Lines="2" @bind-Value="Request.EstimateMessage" For="@(() => Request.EstimateMessage)" Variant="Variant.Outlined" />
                    </MudItem>
                    <MudItem xs="12" md="6">
                        <MudTextField Label="Valor da peça" @bind-Value="Request.PartCost" For="@(() => Request.PartCost)" Variant="Variant.Outlined" />
                    </MudItem>
                    <MudItem xs="12" md="6">
                        <MudTextField Label="Valor da mão de obra" @bind-Value="Request.LaborCost" For="@(() => Request.LaborCost)" Variant="Variant.Outlined" />
                    </MudItem>
                    <MudItem xs="12" md="6">
                        <MudTextField Label="Garantia" @bind-Value="Request.Guarantee" For="@(() => Request.Guarantee)" Variant="Variant.Outlined" />
                    </MudItem>
                    <MudItem xs="12" md="6">
                        <MudSelect  Variant="Variant.Outlined" T="ERepairResult" Label="Situação" @bind-Value="Request.RepairResult" Color="Color.Primary">
                            @foreach (var value in Enum.GetValues(typeof(ERepairResult)).Cast<ERepairResult>())
                            {
                                <MudSelectItem Value="@value">@GetPortugueseLabel(value)</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                </MudGrid>

                <div class="flex justify-end">
                    @if (_isProcessing)
                    {
                        <MudProgressCircular Color="Color.Primary" Size="Size.Medium" Indeterminate="true" />
                    }
                    else
                    {
                        <MudButton @onclick="AdicionarOrcamento"
                                   Disabled="_isProcessing"
                                   Variant="Variant.Filled"
                                   Color="Color.Primary"
                                   Class="text-white px-6 py-2 shadow-md mt-3">
                            Adicionar
                        </MudButton>
                    }
                </div>
            </MudForm>
        </MudPaper>
    </DialogContent>
</MudDialog>



@code {
    private MudForm _form = null!;
    public AddServiceOrderEstimateCommand Request { get; set; } = new();
    private bool _isProcessing = false;

    [CascadingParameter] IMudDialogInstance MudDialog { get; set; } = null!;
    [Parameter] public ServiceOrder ServiceOrder { get; set; } = null!;
    [Parameter] public EventCallback OnEstimateAdded { get; set; }
    [Inject] public ServiceOrderHandler ServiceOrderHandler { get; set; } = null!;
    [Inject] public ISnackbar Snackbar { get; set; } = null!;

    protected override Task OnInitializedAsync()
    {
        Request.RepairResult = ERepairResult.Repair;
        return Task.CompletedTask;
    }

    public async Task AdicionarOrcamento()
    {
        try
        {
            await _form.Validate();

            if (!_form.IsValid)
            {
                Snackbar.Add("Preencha os campos obrigatórios corretamente.", Severity.Error);
                return;
            }

            _isProcessing = true;
            Request.ServiceOrderId = ServiceOrder.Id;
            var result = await ServiceOrderHandler.AddServiceOrderEstimate(Request);

            if (result.IsSuccess)
            {
                Snackbar.Add("Orçamento adicionado com sucesso!", Severity.Success);
                await OnEstimateAdded.InvokeAsync();
                MudDialog.Close(DialogResult.Ok(true));
            }
            else
                Snackbar.Add(result.Message ?? "Ocorreu um erro ao adicionar o orçamento!", Severity.Error);
        }
        catch (Exception e)
        {
            Snackbar.Add(e.Message, Severity.Error);
        }
        finally
        {
            _isProcessing = false;
        }
    }

    public string Situacao =>
        ServiceOrder.ServiceOrderStatus switch
        {
            EServiceOrderStatus.Entered => "Avaliação pendente",
            EServiceOrderStatus.Evaluated => "Avaliado",
            EServiceOrderStatus.OrderPart => "Aguardando peça",
            EServiceOrderStatus.Repaired => "Consertado",
            EServiceOrderStatus.Delivered => "Entregue",
            _ => "Desconhecido"
        };

    private async Task UpdateLocation()
    {
        var command = new GetServiceOrderByIdCommand { Id = ServiceOrder.Id };
        
        var result = await ServiceOrderHandler.GetServiceOrderById(command);
        if (result.IsSuccess)
        {
            if (result.Data != null)
            {
                ServiceOrder.Product.AddLocation(result.Data.Product.Location);
                StateHasChanged();
            }
            else
            {
                Snackbar.Add("Ocorreu um erro ao obter a ordem de serviço", Severity.Error);
            }
        }
    }
    
    private string GetPortugueseLabel(ERepairResult value)
    {
        return value switch
        {
            ERepairResult.Repair => "Tem conserto",
            ERepairResult.Unrepaired => "Não tem conserto",
            ERepairResult.NoDefectFound => "Não apresentou defeito",
            _ => value.ToString()
        };
    }
}