@using System.Globalization
@using System.Text
@using TVS_App.Application.Commands.ServiceOrderCommands
@using TVS_App.Domain.Entities
@using TVS_App.Domain.Enums
@using TVS_App.Domain.ValueObjects.ServiceOrder
@using TVS_App.Web.Extensions
@using TVS_App.Web.Handlers

<MudDialog>
    <TitleContent>
        <div class="bg-red-700 p-4 rounded-t-lg">
            <h2 class="font-bold text-xl lg:text-2xl text-[#BE0405] tracking-tight">
                EDITAR ORDEM DE SERVIÇO: @ServiceOrder.Id
            </h2>
        </div>
    </TitleContent>

    <DialogContent>
        <!-- Seção Empresa -->
        <div class="px-6 pt-4 pb-2 border-b border-cinza">
            <h3 class="font-bold text-lg text-[#BE0405] mb-3">EMPRESA</h3>
            <MudSelect T="EEnterprise"
                       Label="Empresa"
                       @bind-Value="_command.Enterprise"
                       Variant="Variant.Outlined"
                       Class="w-full mb-5">
                @foreach (var enterprise in Enum.GetValues(typeof(EEnterprise)).Cast<EEnterprise>())
                {
                    <MudSelectItem Value="@enterprise">@enterprise.GetDisplayName()</MudSelectItem>
                }
            </MudSelect>
        </div>

        <!-- Seção Cliente -->
        <div class="px-6 py-4 border-b border-cinza bg-gray-50">
            <h3 class="font-bold text-lg text-[#BE0405] mb-3">CLIENTE</h3>

            <MudAutocomplete T="Customer"
                             @bind-Value="_command.Customer"
                             SearchFunc="SearchCustomers"
                             ToStringFunc="@(c => c?.Name?.CustomerName ?? "")"
                             MinCharacters="2"
                             ResetValueOnEmptyText="true"
                             Clearable="true"
                             Variant="Variant.Outlined"
                             Class="max-w-[300px] mb-5"
                             Placeholder="Digite o nome do cliente" />
            
        </div>

        <!-- Seção Produto -->
        <div class="px-6 py-4 border-b border-cinza">
            <h3 class="font-bold text-lg text-[#BE0405] mb-3">DADOS DO PRODUTO</h3>

            <div class="grid grid-cols-1 md:grid-cols-2 gap-3">
                <MudSelect T="EProduct"
                           Label="Tipo"
                           @bind-Value="_command.Type"
                           Variant="Variant.Outlined"
                           Class="w-full">
                    @foreach (var type in Enum.GetValues(typeof(EProduct)).Cast<EProduct>())
                    {
                        <MudSelectItem Value="@type">@type.GetDisplayName()</MudSelectItem>
                    }
                </MudSelect>

                <MudTextField Label="Marca"
                              @bind-Value="_command.Brand"
                              Variant="Variant.Outlined"
                              Class="w-full"
                              Immediate="true" />

                <MudTextField Label="Modelo"
                              @bind-Value="_command.Model"
                              Variant="Variant.Outlined"
                              Class="w-full"
                              Immediate="true" />

                <MudTextField Label="Série"
                              @bind-Value="_command.SerialNumber"
                              Variant="Variant.Outlined"
                              Class="w-full"
                              Immediate="true" />

                <div class="col-span-2">
                    <MudTextField Label="Defeito"
                                  @bind-Value="_command.Defect"
                                  Variant="Variant.Outlined"
                                  Class="w-full"
                                  Lines="3"
                                  Multiline="true"
                                  Immediate="true" />
                </div>

                <MudTextField Label="Acessórios"
                              @bind-Value="_command.Accessories"
                              Variant="Variant.Outlined"
                              Class="w-full"
                              Immediate="true" />

                <MudTextField Label="Prateleira Atual"
                              @bind-Value="_command.Location"
                              Variant="Variant.Outlined"
                              Class="w-full"
                              Immediate="true" />

                <div class="col-span-2">
                    <div class="flex items-center gap-2">
                        <LocationButton ServiceOrder="ServiceOrder" OnLocationChanged="UpdateLocation"/>
                    </div>
                </div>
            </div>
        </div>

        <!-- Seção Orçamento -->
        <div class="px-6 bg-gray-50 py-4 border-b border-cinza">
            <h3 class="font-bold text-lg text-[#BE0405] mb-4">DADOS DO ORÇAMENTO</h3>

            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                <MudSelect T="EServiceOrderStatus"
                           Label="Status da OS"
                           @bind-Value="_command.ServiceOrderStatus"
                           Variant="Variant.Outlined"
                           Class="w-full">
                    @foreach (var status in Enum.GetValues(typeof(EServiceOrderStatus)).Cast<EServiceOrderStatus>())
                    {
                        <MudSelectItem Value="@status">@status.GetDisplayName()</MudSelectItem>
                    }
                </MudSelect>

                <MudSelect T="ERepairStatus"
                           Label="Status do Reparo"
                           @bind-Value="_command.RepairStatus"
                           Variant="Variant.Outlined"
                           Class="w-full">
                    @foreach (var status in Enum.GetValues(typeof(ERepairStatus)).Cast<ERepairStatus>())
                    {
                        <MudSelectItem Value="@status">@status.GetDisplayName()</MudSelectItem>
                    }
                </MudSelect>
                
                <MudTextField Label="Solução"
                              @bind-Value="_command.Solution"
                              Variant="Variant.Outlined"
                              Class="w-full"
                              Lines="3"/>

                <MudTextField Label="Mensagem de orçamento"
                              @bind-Value="_command.EstimateMessage"
                              Variant="Variant.Outlined"
                              Class="w-full"
                              Lines="3"/>

                <div class="space-y-4">
                    <MudNumericField Label="Valor da peça"
                                     @bind-Value="_command.PartCost"
                                     Variant="Variant.Outlined"
                                     Class="w-full"
                                     InputMode="InputMode.text"
                                     Immediate="true"/>

                    <MudNumericField Label="Valor da mão de obra"
                                     @bind-Value="_command.LaborCost"
                                     Variant="Variant.Outlined"
                                     Class="w-full"
                                     InputMode="InputMode.text"
                                     Immediate="true"/>
                </div>

                <MudTextField Label="Garantia"
                              @bind-Value="_command.Guarantee"
                              Variant="Variant.Outlined"
                              Class="w-full"/>

                <MudSelect T="ERepairResult"
                           Label="Resultado do Reparo"
                           @bind-Value="_command.RepairResult"
                           Variant="Variant.Outlined"
                           Class="w-full">
                    @foreach (var result in Enum.GetValues(typeof(ERepairResult)).Cast<ERepairResult>())
                    {
                        <MudSelectItem Value="@result">@result.GetDisplayName()</MudSelectItem>
                    }
                </MudSelect>

                <MudDatePicker Label="Data de Entrega"
                               @bind-Date="_command.DeliveryDate"
                               Variant="Variant.Outlined"
                               Class="w-full"/>
                
            </div>

            <div class="flex justify-end pt-4 gap-3">
                <MudButton Variant="Variant.Text"
                           Color="Color.Default"
                           Class="px-6 py-2"
                           OnClick="() => MudDialog.Cancel()">
                    Cancelar
                </MudButton>

                <MudButton Variant="Variant.Filled"
                           Color="Color.Primary"
                           OnClick="EditServiceOrder">
                    Salvar Alterações
                </MudButton>
            </div>
        </div>
        <div class="px-6 bg-gray-50 py-4 border-b border-cinza">
            @if (ServiceOrder.ServiceOrderStatus == EServiceOrderStatus.Entered && ServiceOrder.RepairStatus == ERepairStatus.Entered)
            {
                <MudPaper Class="py-4 px-2" Elevation="0">
                <MudText Typo="Typo.h6" Color="Color.Primary" Class="uppercase font-bold mb-4">Adicionar Orçamento</MudText>
                <MudForm>
                    <MudGrid>
                        <MudItem xs="12" md="6">
                            <MudTextField Label="Solução" @bind-Value="AddEstimateCommand.Solution" For="@(() => AddEstimateCommand.Solution)" Variant="Variant.Outlined" />
                        </MudItem>
                        <MudItem xs="12" md="6">
                            <MudTextField Label="Mensagem de orçamento" Lines="1" @bind-Value="AddEstimateCommand.EstimateMessage" For="@(() => AddEstimateCommand.EstimateMessage)" Variant="Variant.Outlined" />
                        </MudItem>
                        <MudItem xs="12" md="6">
                            <MudTextField Label="Valor da peça" @bind-Value="AddEstimateCommand.PartCost" For="@(() => AddEstimateCommand.PartCost)" Variant="Variant.Outlined" />
                        </MudItem>
                        <MudItem xs="12" md="6">
                            <MudTextField Label="Valor da mão de obra" @bind-Value="AddEstimateCommand.LaborCost" For="@(() => AddEstimateCommand.LaborCost)" Variant="Variant.Outlined" />
                        </MudItem>
                        <MudItem xs="12" md="6">
                            <MudTextField Label="Garantia" @bind-Value="AddEstimateCommand.Guarantee" For="@(() => AddEstimateCommand.Guarantee)" Variant="Variant.Outlined" />
                        </MudItem>
                        <MudItem xs="12" md="6">
                            <MudSelect  Variant="Variant.Outlined" T="ERepairResult" Label="Situação" @bind-Value="AddEstimateCommand.RepairResult" Color="Color.Primary">
                                @foreach (var value in Enum.GetValues(typeof(ERepairResult)).Cast<ERepairResult>())
                                {
                                    <MudSelectItem Value="@value">@GetPortugueseLabel(value)</MudSelectItem>
                                }
                            </MudSelect>
                        </MudItem>
                        </MudGrid>

                        <div class="flex justify-end">
                            @if (_isProcessing)
                            {
                                <MudProgressCircular Color="Color.Primary" Size="Size.Medium" Indeterminate="true" />
                            }
                            else
                            {
                                <MudButton @onclick="AddEstimateAsync"
                                           Disabled="_isProcessing"
                                           Variant="Variant.Filled"
                                           Color="Color.Primary"
                                           Class="text-white text-lg font-semibold px-6 py-2 mt-3 rounded-lg shadow-md">
                                    Adicionar
                                </MudButton>
                            }
                        </div>
                    </MudForm>
                </MudPaper>
            }
            else if (ServiceOrder.ServiceOrderStatus == EServiceOrderStatus.Evaluated && ServiceOrder.RepairStatus == ERepairStatus.Waiting)
            {
                <MudText Typo="Typo.h6" Color="Color.Primary" Class="uppercase font-bold mb-4">Adicionar Resposta</MudText>
                <MudPaper Class="py-4 px-2 flex flex-row gap-5" Elevation="0">
                    <MudItem>
                        <MudButton OnClick="AddApproveEstimateAsync" Disabled="_isProcessing" Variant="Variant.Filled" Color="Color.Success" Class="text-white text-lg font-semibold px-6 py-2 rounded-lg shadow-md">
                            Aprovado
                        </MudButton>
                    </MudItem>
                    <MudItem>
                        <MudButton OnClick="AddReproveEstimateAsync" Disabled="_isProcessing" Variant="Variant.Filled" Color="Color.Error" Class="text-white text-lg font-semibold px-6 py-2 rounded-lg shadow-md">
                            Reprovado
                        </MudButton>
                    </MudItem>
                </MudPaper>
            }
            else if (ServiceOrder.ServiceOrderStatus == EServiceOrderStatus.Evaluated && ServiceOrder.RepairStatus == ERepairStatus.Approved)
            {
                <MudText Typo="Typo.h6" Color="Color.Primary" Class="uppercase font-bold mb-4">Adicionar Compra de Peça</MudText>
                @if (_isProcessing)
                {
                    <MudItem>
                        <MudProgressCircular Color="Color.Primary" Size="Size.Medium" Indeterminate="true" />
                    </MudItem>
                }
                else
                {
                    <MudItem>
                        <AddPurchasedPartButton ServiceOrder="ServiceOrder" DialogInstance="MudDialog"/>
                    </MudItem>

                }
            }
            else if (ServiceOrder.ServiceOrderStatus == EServiceOrderStatus.OrderPart && ServiceOrder.RepairStatus == ERepairStatus.Approved)
            {
                <MudText Typo="Typo.h6" Color="Color.Primary" Class="uppercase font-bold mb-4">Marcar Como Consertado</MudText>
                <MudButton @onclick="Repaired"
                           EndIcon="@Icons.Material.Filled.Done"
                           Variant="Variant.Filled"
                           Color="Color.Primary"
                           Class="text-white text-lg font-semibold px-6 py-2 rounded-lg shadow-md transition">
                    Consertado
                </MudButton>
            }
            else if (ServiceOrder.ServiceOrderStatus == EServiceOrderStatus.Repaired ||
                     ServiceOrder.RepairStatus == ERepairStatus.Disapproved ||
                     ServiceOrder.RepairResult == ERepairResult.Unrepaired ||
                     ServiceOrder.RepairResult == ERepairResult.NoDefectFound)
            {
                <MudText Typo="Typo.h6" Color="Color.Primary" Class="uppercase font-bold mb-4">Marcar Como Entregue</MudText>
                <DeliveryServiceOrderButton OnDeliveryAdded="OnDeliveryAdded" Command="GetServiceOrderByIdCommand" />
            }
        </div>
    </DialogContent>
</MudDialog>


@code {
    private EditServiceOrderCommand _command;
    private AddServiceOrderEstimateCommand AddEstimateCommand = new();
    private GetServiceOrderByIdCommand GetServiceOrderByIdCommand = new();
    [Parameter] public EventCallback OnRepairAdded { get; set; }
    private bool _isProcessing;
    
    [Parameter] public EventCallback OnDeliveryAdded { get; set; }
    [CascadingParameter] IMudDialogInstance MudDialog { get; set; } = null!;
    [Parameter] public ServiceOrder ServiceOrder { get; set; } = null!;
    [Inject] public ServiceOrderHandler ServiceOrderHandler { get; set; } = null!;
    [Inject] public CustomerHandler CustomerHandler { get; set; } = null!;
    [Inject] public ISnackbar Snackbar { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _command = new EditServiceOrderCommand
            {
                Customer = ServiceOrder.Customer,
                Brand = ServiceOrder.Product.Brand,
                Model = ServiceOrder.Product.Model,
                SerialNumber = ServiceOrder.Product.SerialNumber,
                Defect = ServiceOrder.Product.Defect,
                Accessories = ServiceOrder.Product.Accessories,
                Type = ServiceOrder.Product.Type,
                CustomerId = ServiceOrder.CustomerId,
                DeliveryDate = ServiceOrder.DeliveryDate,
                Solution = ServiceOrder.Solution?.ServiceOrderSolution ?? "",
                Enterprise = ServiceOrder.Enterprise,
                Guarantee = ServiceOrder.Guarantee?.ServiceOrderGuarantee ?? "",
                LaborCost = ServiceOrder.LaborCost.ServiceOrderLaborCost,
                ServiceOrderStatus = ServiceOrder.ServiceOrderStatus,
                RepairStatus = ServiceOrder.RepairStatus,
                RepairResult = ServiceOrder.RepairResult ?? new ERepairResult(),
                PartCost = ServiceOrder.PartCost.ServiceOrderPartCost,
                EstimateMessage = ServiceOrder.EstimateMessage,
                Location = ServiceOrder.Product.Location
            };

            AddEstimateCommand.ServiceOrderId = ServiceOrder.Id;
            GetServiceOrderByIdCommand.Id = ServiceOrder.Id;
        }
        catch (Exception e)
        {
            Snackbar.Add(e.Message, Severity.Error);
        }
    }

    public async Task EditServiceOrder()
    {
        ServiceOrder.EditCustomer(_command.Customer);
        ServiceOrder.EditEnterprise(_command.Enterprise);
        ServiceOrder.EditGuarantee(new Guarantee(_command.Guarantee ?? ""));
        ServiceOrder.EditProduct(new Product(_command.Brand, _command.Model, _command.SerialNumber, _command.Defect, _command.Accessories, _command.Type));
        ServiceOrder.EditSolution(new Solution(_command.Solution ?? ""));
        ServiceOrder.EditLaborCost(new LaborCost(_command.LaborCost));
        ServiceOrder.EditPartCost(new PartCost(_command.PartCost));
        ServiceOrder.EditRepairResult(_command.RepairResult);
        ServiceOrder.EditRepairStatus(_command.RepairStatus);
        ServiceOrder.EditServiceOrderStatus(_command.ServiceOrderStatus);
        ServiceOrder.EditDeliveryDate(_command.DeliveryDate);
        ServiceOrder.EditEstimateMessage(_command.EstimateMessage ?? "");
        
        if (_command.RepairStatus == ERepairStatus.Waiting)
            ServiceOrder.AddEstimate(_command.Solution ?? "", _command.Guarantee, _command.PartCost, _command.LaborCost, _command.RepairResult, _command.EstimateMessage ?? "");
        
        if (_command.RepairStatus == ERepairStatus.Approved)
            ServiceOrder.ApproveEstimate();
        
        if (_command.RepairStatus == ERepairStatus.Disapproved)
            ServiceOrder.RejectEstimate();
        
        if (_command.ServiceOrderStatus == EServiceOrderStatus.OrderPart)
            ServiceOrder.AddPurchasedPart();
        
        if (_command.ServiceOrderStatus == EServiceOrderStatus.Repaired)
            ServiceOrder.ExecuteRepair();
        
        if (_command.ServiceOrderStatus == EServiceOrderStatus.Delivered)
            ServiceOrder.AddDelivery();
        
        var result = await ServiceOrderHandler.EditServiceOrderAsync(ServiceOrder);
        if (result.IsSuccess)
        {
            Snackbar.Add(result.Message ?? "Ordem de serviço alterada com sucesso!", Severity.Success);
            MudDialog.Close(DialogResult.Ok(true));
        }
        else
            Snackbar.Add(result.Message ?? "Ocorreu um erro ao tentar alterar a ordem de serviço");
        
    }

    private async Task AddEstimateAsync()
    {
        _isProcessing = true;
        try
        {
            var result = await ServiceOrderHandler.AddServiceOrderEstimate(AddEstimateCommand);
            if (result.IsSuccess)
            {
                Snackbar.Add(result.Message ?? "Orçamento adicionado com sucesso!", Severity.Success);
                MudDialog.Close();
                StateHasChanged();
            }
            else
                Snackbar.Add(result.Message ?? "Ocorreu um erro ao tentar adicionar o orçamento", Severity.Error);
        }
        catch (Exception e)
        {
            Snackbar.Add(e.Message, Severity.Error);
        }
        finally
        {
            _isProcessing = false;
        }
    }
    
    private async Task AddApproveEstimateAsync()
    {
        _isProcessing = true;
        try
        {
            var result = await ServiceOrderHandler.AddServiceOrderApproveEstimate(GetServiceOrderByIdCommand);
            if (result.IsSuccess)
            {
                Snackbar.Add(result.Message ?? "Resposta adicionada com sucesso!", Severity.Success);
                MudDialog.Close();
                StateHasChanged();
            }
            else
                Snackbar.Add(result.Message ?? "Ocorreu um erro ao tentar adicionar a resposta", Severity.Error);
        }
        catch (Exception e)
        {
            Snackbar.Add(e.Message, Severity.Error);
        }
        finally
        {
            _isProcessing = false;
        }
    }
    
    private async Task AddReproveEstimateAsync()
    {
        _isProcessing = true;
        try
        {
            var result = await ServiceOrderHandler.AddServiceOrderRejectEstimate(GetServiceOrderByIdCommand);
            if (result.IsSuccess)
            {
                Snackbar.Add(result.Message ?? "Resposta adicionada com sucesso!", Severity.Success);
                MudDialog.Close();
                StateHasChanged();
            }
            else
                Snackbar.Add(result.Message ?? "Ocorreu um erro ao tentar adicionar a resposta", Severity.Error);
        }
        catch (Exception e)
        {
            Snackbar.Add(e.Message, Severity.Error);
        }
        finally
        {
            _isProcessing = false;
        }
    }
    
    public async Task Repaired()
    {
        try
        {
            var result = await ServiceOrderHandler.AddServiceOrderRepair(GetServiceOrderByIdCommand);

            if (result.IsSuccess)
            {
                Snackbar.Add("Conserto concluído com sucesso!", Severity.Success);
                await OnRepairAdded.InvokeAsync();
                MudDialog.Close(DialogResult.Ok(true));
            }
            else
                Snackbar.Add(result.Message ?? "Ocorreu um erro ao concluir o conserto!", Severity.Error);
        }
        catch (Exception e)
        {
            Snackbar.Add(e.Message, Severity.Error);
        }
    }
    
    private async Task<IEnumerable<Customer>> SearchCustomers(string? searchTerm, CancellationToken cancellationToken)
    {
        if (string.IsNullOrWhiteSpace(searchTerm) || searchTerm.Length < 3)
            return Enumerable.Empty<Customer>();

        try
        {
            var result = await CustomerHandler.GetCustomerByNameAsync(searchTerm);

            if (!result.IsSuccess || result.Data == null)
            {
                Snackbar.Add(result.Message ?? "Erro ao buscar clientes", Severity.Error);
                return Enumerable.Empty<Customer>();
            }

            var normalizedTerm = Normalize(searchTerm);

            return result.Data
                .Where(c => Normalize(c.Name.CustomerName).Contains(normalizedTerm))
                .Take(20);
        }
        catch (Exception e)
        {
            Snackbar.Add($"Erro: {e.Message}", Severity.Error);
            return Enumerable.Empty<Customer>();
        }
    }
    
    private static string Normalize(string text)
    {
        return string.Concat(text.Normalize(NormalizationForm.FormD)
                .Where(c => CharUnicodeInfo.GetUnicodeCategory(c) != UnicodeCategory.NonSpacingMark))
            .ToLowerInvariant();
    }
    
    private async Task UpdateLocation()
    {
        var command = new GetServiceOrderByIdCommand { Id = ServiceOrder.Id };
        
        var result = await ServiceOrderHandler.GetServiceOrderById(command);
        if (result.IsSuccess)
        {
            if (result.Data != null)
            {
                ServiceOrder.Product.AddLocation(result.Data.Product.Location);
                StateHasChanged();
            }
            else
            {
                Snackbar.Add("Ocorreu um erro ao obter a ordem de serviço", Severity.Error);
            }
        }
    }
    
    private string GetPortugueseLabel(ERepairResult value)
    {
        return value switch
        {
            ERepairResult.Repair => "Tem conserto",
            ERepairResult.Unrepaired => "Não tem conserto",
            ERepairResult.NoDefectFound => "Não apresentou defeito",
            _ => value.ToString()
        };
    }
}