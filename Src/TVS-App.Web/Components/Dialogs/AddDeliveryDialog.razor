@using TVS_App.Application.Commands.ServiceOrderCommands
@using TVS_App.Domain.Entities
@using TVS_App.Domain.Enums
@using TVS_App.Web.Extensions
@using TVS_App.Web.Handlers
<MudDialog>
    <TitleContent>
        <h2 class="font-extrabold text-xl lg:text-3xl font-sans text-[#750303] text-center">
            ADICIONAR ENTREGA - OS @ServiceOrder.Id
        </h2>
    </TitleContent>

    <DialogContent>
        <MudPaper Class="p-4">
            <!-- EMPRESA -->
            <MudText Typo="Typo.h6" Class="text-[#750303] font-bold mb-2">Empresa</MudText>
            <MudText Class="mb-4">@ServiceOrder.Enterprise.GetDisplayName()</MudText>

            <!-- DADOS DO CLIENTE -->
            <MudText Typo="Typo.h6" Class="text-[#750303] font-bold mb-4 mt-6">Dados do Cliente</MudText>
            <MudGrid>
                <MudItem xs="12" md="6">
                    <MudTextField  Variant="Variant.Outlined" Label="Nome" ReadOnly="true" Value="@ServiceOrder.Customer.Name.CustomerName" />
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudTextField  Variant="Variant.Outlined" Label="Telefone 1" ReadOnly="true" Value="@ServiceOrder.Customer.Phone.CustomerPhone" />
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudTextField  Variant="Variant.Outlined" Label="Endereço" ReadOnly="true" Value="@ServiceOrder.Customer.Address.ToString().ToUpper()" />
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudTextField Variant="Variant.Outlined" Label="Telefone 2" ReadOnly="true" Value="@ServiceOrder.Customer.Phone2.CustomerPhone" />
                </MudItem>
            </MudGrid>

            <!-- DADOS DO PRODUTO -->
            <MudText Typo="Typo.h6" Class="text-[#750303] font-bold mb-4 mt-6">Dados do Produto</MudText>
            <MudGrid>
                <MudItem xs="12" md="6">
                    <MudTextField Variant="Variant.Outlined" Label="Tipo" ReadOnly="true" Value="@ServiceOrder.Product.Type.GetDisplayName()" />
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudTextField Variant="Variant.Outlined" Label="Marca" ReadOnly="true" Value="@ServiceOrder.Product.Brand" />
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudTextField Variant="Variant.Outlined" Label="Modelo" ReadOnly="true" Value="@ServiceOrder.Product.Model" />
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudTextField Variant="Variant.Outlined" Label="Série" ReadOnly="true" Value="@ServiceOrder.Product.SerialNumber" />
                </MudItem>
                <MudItem xs="12">
                    <MudTextField  Variant="Variant.Outlined" Label="Defeito" ReadOnly="true" Value="@ServiceOrder.Product.Defect" />
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudTextField  Variant="Variant.Outlined" Label="Data de Entrada" ReadOnly="true" Value="@ServiceOrder.EntryDate.ToString("dd/MM/yyyy")" />
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudTextField Variant="Variant.Outlined" Label="Prateleira" ReadOnly="true" Value="@ServiceOrder.Product.Location" />
                </MudItem>
            </MudGrid>
            <div class="mt-3">
                <LocationButton ServiceOrder="ServiceOrder" OnLocationChanged="UpdateLocation" />
            </div>

            <!-- INFORMAÇÕES DO ORÇAMENTO -->
            <MudText Typo="Typo.h6" Class="text-[#750303] font-bold mb-4 mt-6">Informações do Orçamento</MudText>
            <MudGrid>
                <MudItem xs="12" md="6">
                    <MudTextField Variant="Variant.Outlined" Label="Solução" ReadOnly="true" Value="@ServiceOrder.Solution?.ServiceOrderSolution" />
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudTextField Variant="Variant.Outlined" Label="Valor" ReadOnly="true" Value="@ServiceOrder.TotalAmount" />
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudTextField Variant="Variant.Outlined" Label="Conserto feito em" ReadOnly="true" Value="@ServiceOrder.RepairDate?.ToString("dd/MM/yyyy")" />
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudTextField Variant="Variant.Outlined" Label="Situação" ReadOnly="true" Value="@Situacao" />
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudTextField Variant="Variant.Outlined" Label="Tem Conserto?" ReadOnly="true" Value="@TemConserto.ToString()" />
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudTextField Variant="Variant.Outlined" Label="Resposta do Cliente" ReadOnly="true" Value="@Resposta" />
                </MudItem>
            </MudGrid>

            <!-- BOTÃO DE ENTREGA -->
            <div class="py-6 flex justify-end">
                <DeliveryServiceOrderButton OnDeliveryAdded="OnDeliveryAdded" Command="Command" />
            </div>
        </MudPaper>
    </DialogContent>
</MudDialog>




@code {
    [CascadingParameter] IMudDialogInstance MudDialog { get; set; } = null!;
    [Parameter] public ServiceOrder ServiceOrder { get; set; } = null!;
    [Parameter] public EventCallback OnDeliveryAdded { get; set; }
    [Inject] public ServiceOrderHandler ServiceOrderHandler { get; set; } = null!;
    [Inject] public ISnackbar Snackbar { get; set; } = null!;

    private GetServiceOrderByIdCommand Command => new GetServiceOrderByIdCommand{ Id = ServiceOrder.Id };

    public string Situacao =>
        ServiceOrder.ServiceOrderStatus switch
        {
            EServiceOrderStatus.Entered => "Avaliação pendente",
            EServiceOrderStatus.Evaluated => "Avaliado",
            EServiceOrderStatus.OrderPart => "Aguardando peça",
            EServiceOrderStatus.Repaired => "Consertado",
            EServiceOrderStatus.Delivered => "Entregue",
            _ => "Desconhecido"
        };

    public string TemConserto =>
        ServiceOrder.RepairResult switch
        {
            ERepairResult.Repair => "Sim",
            ERepairResult.Unrepaired => "Não",
            ERepairResult.NoDefectFound => "Não apresentou defeito",
            _ => "Desconhecido"
        };

    public string Resposta =>
        ServiceOrder.RepairStatus switch
        {
            ERepairStatus.Entered => "Sem orçamento ainda",
            ERepairStatus.Waiting => "Aguardando resposta",
            ERepairStatus.Approved => "Aprovado",
            ERepairStatus.Disapproved => "Não aprovou",
            _ => "Desconhecido"
        };

    private async Task UpdateLocation()
    {
        var command = new GetServiceOrderByIdCommand { Id = ServiceOrder.Id };
        
        var result = await ServiceOrderHandler.GetServiceOrderById(command);
        if (result.IsSuccess)
        {
            if (result.Data != null)
            {
                ServiceOrder.Product.AddLocation(result.Data.Product.Location);
                StateHasChanged();
            }
            else
            {
                Snackbar.Add("Ocorreu um erro ao obter a ordem de serviço", Severity.Error);
            }
        }
    }
}