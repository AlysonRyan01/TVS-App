@using TVS_App.Application.Commands.ServiceOrderCommands
@using TVS_App.Domain.Entities
@using TVS_App.Domain.Enums
@using TVS_App.Web.Handlers

<MudDialog>
    <TitleContent>
        <h2 class="font-extrabold text-xl lg:text-3xl font-sans text-[#750303] text-center">ADICIONAR RESPOSTA - OS @ServiceOrder.Id</h2>
    </TitleContent>

    <DialogContent>
        <!-- EMPRESA -->
        <section class="border-b border-[#dfdfdf] py-4">
            <h2 class="text-[#750303] text-lg font-bold uppercase mb-2">Empresa</h2>
            <p class="text-base font-semibold">@ServiceOrder.Enterprise</p>
        </section>

        <!-- DADOS DO CLIENTE -->
        <section class="border-b border-[#dfdfdf] py-4">
            <h2 class="text-[#750303] text-lg font-bold uppercase mb-4">Dados do Cliente</h2>
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                <p><span class="font-bold text-[#750303]">Nome:</span> @ServiceOrder.Customer.Name.CustomerName</p>
                <p><span class="font-bold text-[#750303]">Telefone 1:</span> @ServiceOrder.Customer.Phone.CustomerPhone</p>
                <p><span class="font-bold text-[#750303]">Endereço:</span> @ServiceOrder.Customer.Address.ToString().ToUpper()</p>
                <p><span class="font-bold text-[#750303]">Telefone 2:</span> @ServiceOrder.Customer.Phone2.CustomerPhone</p>
            </div>
        </section>

        <!-- DADOS DO PRODUTO -->
        <section class="border-b border-[#dfdfdf] py-4">
            <h2 class="text-[#750303] text-lg font-bold uppercase mb-4">Dados do Produto</h2>
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                <p><span class="font-bold text-[#750303]">Tipo:</span> @ServiceOrder.Product.Type</p>
                <p><span class="font-bold text-[#750303]">Marca:</span> @ServiceOrder.Product.Brand</p>
                <p><span class="font-bold text-[#750303]">Modelo:</span> @ServiceOrder.Product.Model</p>
                <p><span class="font-bold text-[#750303]">Série:</span> @ServiceOrder.Product.SerialNumber</p>
                <p><span class="font-bold text-[#750303]">Defeito:</span> @ServiceOrder.Product.Defect</p>
                <p><span class="font-bold text-[#750303]">Data de Entrada:</span> @ServiceOrder.EntryDate.ToString("dd/MM/yyyy")</p>
                <p><span class="font-bold text-[#750303]">Prateleira:</span> @ServiceOrder.Product.Location</p>
            </div>
            <div class="mt-3">
                <LocationButton ServiceOrder="ServiceOrder" OnLocationChanged="AtualizarPrateleira" />
            </div>
        </section>

        <!-- INFORMAÇÕES DO ORÇAMENTO -->
        <section class="border-b border-[#dfdfdf] py-4">
            <h2 class="text-[#750303] text-lg font-bold uppercase mb-4">Informações do Orçamento</h2>
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                <p><span class="font-bold text-[#750303]">Solução:</span> @ServiceOrder.Solution?.ServiceOrderSolution</p>
                <p><span class="font-bold text-[#750303]">Valor:</span> @ServiceOrder.TotalAmount</p>
                <p><span class="font-bold text-[#750303]">Orçamento feito em:</span> @ServiceOrder.InspectionDate?.ToString("dd/MM/yyyy")</p>
                <p><span class="font-bold text-[#750303]">Situação:</span> @Situacao</p>
                <p><span class="font-bold text-[#750303]">Tem conserto?</span> @TemConserto</p>
                <p><span class="font-bold text-[#750303]">Resposta do Cliente:</span> @Resposta</p>
            </div>
        </section>

        <!-- BOTÕES -->
        <section class="py-6 flex justify-end gap-4">
            @if (_isProcessing)
            {
                <MudProgressCircular Color="Color.Primary" Size="Size.Medium" Indeterminate="true" />
            }
            else
            {
                <MudButton @onclick="Aprovado"
                           Disabled="_isProcessing"
                           Variant="Variant.Filled"
                           Color="Color.Success"
                           Class="text-white text-lg font-semibold px-6 py-2 rounded-lg shadow-md transition">
                    Aprovado
                </MudButton>

                <MudButton @onclick="Reprovado"
                           Disabled="_isProcessing"
                           Variant="Variant.Filled"
                           Color="Color.Error"
                           Class="text-white text-lg font-semibold px-6 py-2 rounded-lg shadow-md transition">
                    Reprovado
                </MudButton>
            }
        </section>
    </DialogContent>
</MudDialog>

@code {
    private bool _isProcessing = false;
    
    [CascadingParameter] IMudDialogInstance MudDialog { get; set; } = null!;
    [Parameter] public ServiceOrder ServiceOrder { get; set; } = null!;
    [Parameter] public EventCallback OnResponseAdded { get; set; }
    [Inject] public ServiceOrderHandler ServiceOrderHandler { get; set; } = null!;
    [Inject] public ISnackbar Snackbar { get; set; } = null!;

    public async Task Aprovado()
    {
        try
        {
            _isProcessing = true;
            var result = await ServiceOrderHandler.AddServiceOrderApproveEstimate(new GetServiceOrderByIdCommand { Id = ServiceOrder.Id });
            if (result.IsSuccess)
            {
                Snackbar.Add("Resposta adicionada com sucesso!", Severity.Success);
                await OnResponseAdded.InvokeAsync();
                MudDialog.Close(DialogResult.Ok(true));
            }
            else
                Snackbar.Add(result.Message ?? "Ocorreu um erro ao adicionar uma resposta na OS", Severity.Error);

        }
        catch (Exception e)
        {
            Snackbar.Add(e.Message, Severity.Error);
        }
        finally
        {
            _isProcessing = false;
        }
    }

    public async Task Reprovado()
    {
        try
        {
            _isProcessing = true;
            var result = await ServiceOrderHandler.AddServiceOrderRejectEstimate(new GetServiceOrderByIdCommand { Id = ServiceOrder.Id });
            if (result.IsSuccess)
            {
                Snackbar.Add("Resposta adicionada com sucesso!", Severity.Success);
                await OnResponseAdded.InvokeAsync();
                MudDialog.Close(DialogResult.Ok(true));
            }
            else
                Snackbar.Add(result.Message ?? "Ocorreu um erro ao adicionar uma resposta na OS", Severity.Error);
        }
        catch (Exception e)
        {
            Snackbar.Add(e.Message, Severity.Error);
        }
        finally
        {
            _isProcessing = false;
        }
    }

    public string Situacao =>
        ServiceOrder.ServiceOrderStatus switch
        {
            EServiceOrderStatus.Entered => "Avaliação pendente",
            EServiceOrderStatus.Evaluated => "Avaliado",
            EServiceOrderStatus.OrderPart => "Aguardando peça",
            EServiceOrderStatus.Repaired => "Consertado",
            EServiceOrderStatus.Delivered => "Entregue",
            _ => "Desconhecido"
        };

    public string TemConserto =>
        ServiceOrder.RepairResult switch
        {
            ERepairResult.Repair => "Sim",
            ERepairResult.Unrepaired => "Não",
            ERepairResult.NoDefectFound => "Não apresentou defeito",
            _ => "Desconhecido"
        };

    public string Resposta =>
        ServiceOrder.RepairStatus switch
        {
            ERepairStatus.Entered => "Sem orçamento ainda",
            ERepairStatus.Waiting => "Aguardando resposta",
            ERepairStatus.Approved => "Aprovado",
            ERepairStatus.Disapproved => "Não aprovou",
            _ => "Desconhecido"
        };

    private async Task AtualizarPrateleira()
    {
        var result = await ServiceOrderHandler.GetServiceOrderById(new GetServiceOrderByIdCommand { Id = ServiceOrder.Id });
        if (result.IsSuccess)
        {
            if (result.Data != null)
            {
                ServiceOrder.Product.AddLocation(result.Data.Product.Location);
                StateHasChanged();
            }
            else
            {
                Snackbar.Add("Ocorreu um erro ao obter a ordem de serviço", Severity.Error);
            }
        }
    }
}