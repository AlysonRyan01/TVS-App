@using TVS_App.Application.Commands.ServiceOrderCommands
@using TVS_App.Web.Handlers

@if (_isProcessing)
{
    <MudProgressCircular Color="Color.Primary" Size="Size.Medium" Indeterminate="true" />
}
else
{
    <MudButton @onclick="Delivery"
               Disabled="_isProcessing"
               Variant="Variant.Text"
               Color="Color.Primary"
               FullWidth="false">Entregar</MudButton>
}


@code {
    [Parameter] public GetServiceOrderByIdCommand Command { get; set; } = null!;

    [Parameter] public EventCallback OnDeliveryAdded { get; set; }
    [Inject] public ServiceOrderHandler Handler { get; set; } = null!;
    [Inject] public ISnackbar Snackbar { get; set; } = null!;
    [Inject] public IJSRuntime Js { get; set; } = null!;


    private bool _isProcessing = false;
    public async Task Delivery()
    {
        try
        {
            Command.Validate();

            _isProcessing = true;
            var result = await Handler.AddServiceOrderDeliveryAndReturnPdfAsync(Command);
            if (!result.IsSuccess || result.Data is null)
            {
                Snackbar.Add(result.Message ?? "Erro ao criar a ordem de serviço", Severity.Error);
                return;
            }

            var base64 = Convert.ToBase64String(result.Data);
            await Js.InvokeVoidAsync("GeneratePdf", base64, "ordem_servico.pdf");
            
            await OnDeliveryAdded.InvokeAsync();
            
            Snackbar.Add("Ordem de serviço entregue com sucesso!", Severity.Success);
        }
        catch (Exception e)
        {
            Snackbar.Add(e.Message, Severity.Error);
        }
        finally
        {
            _isProcessing = false;
        }
    }
}