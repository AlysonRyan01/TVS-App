@using TVS_App.Application.Commands.ServiceOrderCommands
@using TVS_App.Web.Handlers

@if (_isProcessing)
{
    <MudProgressCircular Color="Color.Primary" Size="Size.Medium" Indeterminate="true" />
}
else
{
    <MudButton @onclick="Create"
               Disabled="_isProcessing"
               Variant="Variant.Text"
               Color="Color.Primary"
               FullWidth="false">Criar</MudButton>
}

@code {
    [Parameter] public CreateServiceOrderCommand Command { get; set; } = null!;
    
    [Inject] public ServiceOrderHandler Handler { get; set; } = null!;
    [Inject] public ISnackbar Snackbar { get; set; } = null!;
    [Inject] public IJSRuntime Js { get; set; } = null!;

    private bool _isProcessing = false;
    public async Task Create()
    {
        try
        {
            Command.Validate();
            _isProcessing = true;

            var result = await Handler.CreateServiceOrderAndReturnPdfAsync(Command);
            if (!result.IsSuccess || result.Data is null)
            {
                Snackbar.Add(result.Message ?? "Erro ao criar a ordem de serviço", Severity.Error);
                return;
            }

            var base64 = Convert.ToBase64String(result.Data);
            await Js.InvokeVoidAsync("GeneratePdf", base64, "ordem_servico.pdf");

            Snackbar.Add("Ordem de serviço criada com sucesso!", Severity.Success);
        }
        catch (Exception e)
        {
            Snackbar.Add(e.Message, Severity.Error);
        }
        finally
        {
            _isProcessing = false;
        }
    }
}